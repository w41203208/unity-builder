pipeline {
  agent { node { label "Agent-1" } }
  stages {
    stage('Build') {
      steps {
        echo "Hello world"
        sh '''
          if [ -e temp/ ]; then
            sudo rm -r temp;
          fi

          if [ -e build/ ]; then
            sudo rm -r build;
          fi

          sudo mkdir temp
          sudo mkdir build

          if [ -f test.log ]; then
            sudo rm -r test.log;
          fi

          sh docker-cmd.sh build
        '''
      }
    }
    stage('Return-Active') {
      steps {
        sh '''
          if [ -f "$(pwd)/containers.txt" ]; then
            while read -r container_id; do
              cc=$container_id
              cc_exit=$(sudo docker ps -a | grep "$cc" | grep "Exited");
              if [ "$cc_exit" = "" ]; then
                echo testtestestsetsetset;
                sh docker-cmd.sh exec return;
              fi;
            done < $(pwd)/containers.txt;
          fi
        '''
      }
    }
    stage('Post-Deploy') {
      steps {
        sh '''
        if [ -f "$(pwd)/containers.txt" ]; then
          while read -r container_id; do
            cc=$container_id
            cc_exit=$(sudo docker ps -a | grep "$cc");
            if [ "$cc_exit" != "" ]; then
              sh docker-cmd.sh stop;
            fi;
          done < $(pwd)/containers.txt;
        fi
        '''
      }
    }
    stage('Deploy') {
      steps {
        sh '''
          sh docker-cmd.sh run
        '''
      }
    }
    stage('Get-Active') {
      steps {
        sh '''
          sh docker-cmd.sh exec active
        '''
      }
    }
    stage('Upload-Artifacts') {
      steps {
        archiveArtifacts artifacts: 'containers.txt', followSymlinks: false
      }
    }
  }
}